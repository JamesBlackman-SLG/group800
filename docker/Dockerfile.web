# Use a minimal base image
FROM golang:1.23.2-bookworm as builder

# Get the proto dependencies
# WORKDIR /anyonefortennisproto/github.com/JamesBlackman-SLG/anyonefortennisproto
# COPY anyonefortennisproto/github.com/JamesBlackman-SLG/anyonefortennisproto ./
# RUN go mod download

# Set the working directory inside the container
WORKDIR /app

RUN go install github.com/a-h/templ/cmd/templ@latest
# Copy the Go server code from the source directory to the container
COPY web/ ./

# Build the Go server in release mode
RUN go clean -modcache
RUN go mod download
RUN go mod tidy

# Install Node.js and npm
RUN apt-get update && apt-get install -y curl \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Verify installations
RUN go version && node --version && npm --version

RUN npm install
RUN npm run build:css
RUN templ generate
RUN go build -o group800web ./cmd


# Use a minimal runtime image for the final stage
FROM debian:bookworm-slim

# Install necessary libraries and CA certificates for TLS connections
RUN apt-get update && apt-get install -y --no-install-recommends \
  ca-certificates && \
  rm -rf /var/lib/apt/lists/*

WORKDIR /root/

# Copy the built binary from the builder stage
COPY --from=builder /app/group800web .

# Set executable permissions for the Go binary
RUN chmod +x /root/group800web

# Copy the certificate files from the source folder to the runtime container
# COPY ../.certs /root/.certs

COPY ../web/views/static /views/static

# Set permissions for the certificates
# RUN chmod -R 600 /root/.certs

# Expose the port that the Go server listens on
EXPOSE 8080
# Set environment variable for gRPC port
ENV GIN_MODE=release
ENV GROUP_800_ENV=production

# Command to run the Go server
ENTRYPOINT ["./group800web"]
